AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS CloudFormation template IAM Roles Nested Stack'

Parameters:
  EKSRoleName:
    Type: String
    Default: 'eks-role-name'
  FargateExecutionRoleName:
    Type: String
    Default: 'fargate-role-name'
  EKSSecurityGroupName:
    Type: String
    Default: 'eks-sg-name'

Resources:
  EKSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks.amazonaws.com
            - eks-fargate-pods.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      - arn:aws:iam::aws:policy/AmazonEKSVPCResourceController
      Path: '/'
      RoleName: !Ref EKSRoleName
  FargateExecutionRoleArn:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - eks-fargate-pods.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
      Path: '/'
      RoleName: !Ref FargateExecutionRoleName
  
  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Ref EKSSecurityGroupName
      GroupDescription: 'Enable EKS access on the inbound port'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  
Outputs:
  EKSRoleArn:
    Description: 'EKS IAM Role'
    Value: !GetAtt EKSIAMRole.Arn
  FargateExecutionRoleArn:
    Description: 'Fargate Profile IAM Role'
    Value: !GetAtt FargateExecutionRoleArn.Arn
  
  SecurityGroupId:
    Description: 'EKS Security Group'
    Value: !Ref EKSSecurityGroupName
